from typing import Dict, Any, Optional, Union
from abc import ABC, abstractmethod

# Importe sua classe de inserÃ§Ã£o
from src.model.userModel.operationsDB.insertModel import InsertValues

# 1. CLASSE BASE ABSTRATA (Define o "contrato")
class BaseUserType(ABC):
    """
    Define a interface comum para todos os tipos de comportamento de usuÃ¡rio.
    """
    def __init__(self, user_data):
        self.user_data = user_data

    @abstractmethod
    def insert_data(self, table_name: str, data: Dict[str, Any]) -> Optional[Union[int, bool]]:
        """MÃ©todo para inserir dados. A implementaÃ§Ã£o varia por tipo de usuÃ¡rio."""
        pass

# 2. COMPORTAMENTO DO ALUNO (NÃ£o tem permissÃ£o para inserir)
class AlunoUser(BaseUserType):
    """
    ImplementaÃ§Ã£o para usuÃ¡rios do tipo 'aluno'.
    NÃ£o possui permissÃµes de escrita no banco.
    """
    def insert_data(self, table_name: str, data: Dict[str, Any]) -> None:
        print(f"ğŸš« AÃ‡ÃƒO NEGADA: UsuÃ¡rios do tipo 'aluno' nÃ£o podem inserir dados.")
        # LanÃ§ar um erro Ã© uma opÃ§Ã£o ainda melhor para a lÃ³gica da aplicaÃ§Ã£o
        # raise PermissionError("UsuÃ¡rios do tipo 'aluno' nÃ£o tÃªm permissÃ£o para inserir dados.")
        return None

# 3. COMPORTAMENTO DO ADMINISTRADOR (Pode inserir dados)
class AdminUser(BaseUserType):
    """
    ImplementaÃ§Ã£o para usuÃ¡rios com permissÃµes de administrador.
    ContÃ©m a lÃ³gica para interagir com o banco de dados.
    """
    def __init__(self, user_data):
        super().__init__(user_data)
        # O administrador ganha a "ferramenta" de inserÃ§Ã£o
        self.db_inserter = InsertValues()
        print("ğŸ”§ Ferramenta de inserÃ§Ã£o inicializada para o Admin.")

    def insert_data(self, table_name: str, data: Dict[str, Any]) -> Optional[Union[int, bool]]:
        print(f"ğŸ”‘ Admin executando inserÃ§Ã£o na tabela '{table_name}'...")
        try:
            # Delega a chamada para a classe InsertValues
            return self.db_inserter.insert(table_name, **data)
        except Exception as e:
            print(f"Erro durante a operaÃ§Ã£o de inserÃ§Ã£o do admin: {e}")
            return None

# 4. COMPORTAMENTO DO ADMIN SUPREMO (Herda do Admin)
class SupremoUser(AdminUser):
    """
    ImplementaÃ§Ã£o para o super administrador. Herda todas as capacidades
    do Admin e pode ter funcionalidades adicionais no futuro.
    """
    def __init__(self, user_data):
        super().__init__(user_data)
        # Pode ter ferramentas adicionais no futuro
        print("ğŸ‘‘ SupremoUser inicializado com todas as permissÃµes de Admin.")