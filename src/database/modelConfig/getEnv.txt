from dotenv import load_dotenv
from pathlib import Path
from typing import Union, Optional

import os

class EnvCollectData():
    @staticmethod
    def getEnvSQL()->Union[dict[str,Optional[str]], str]:
        try:
            env_path:Path= Path(__file__).resolve().parent.parent.parent.parent / "config" / "postGre.env"
            if not env_path.exists():
                return f"Arquivo .env SQL não encontrado no caminho: {env_path}"
            envRes:bool =load_dotenv(env_path)
            if envRes:
                sqlConfig = {
                    "database": os.getenv("DATABASE"),
                    "host": os.getenv("HOST"),
                    "user": os.getenv("USER"),
                    "password": os.getenv("PASSWORD"),
                    "port":os.getenv("PORT")
                }
                return sqlConfig            

        except Exception as err:
            return f'Nenhum arquivo postGre.env Encontrado:\n {err}'
    @staticmethod
    def getEnvNoSQL()->Union[dict[str,Optional[str]], str]:
        try:
            env_path: Path=Path(__file__).resolve().parent.parent.parent.parent / "config" / "mongoDB.env"
            if not env_path.exists():
                return f"Arquivo .env NoSQL não encontrado no caminho: {env_path}"
            envRes:bool=load_dotenv(env_path)
            if envRes:
                noSqlConfig={
                    "uriDB":os.getenv("MONGO_URI"),
                    "passwordDB":os.getenv("MONGO_USER"),
                    "userDB":os.getenv("MONGO_PASSWORD")
                }
                return noSqlConfig
            else:
                return f'Nenhum dado encontrado no arquivo: mongoDB.env:\nlocal:{env_path}'
        except Exception as err:
                return f'Nenhum arquivo mongoDB.env Encontrado:\n {err}'



envData = EnvCollectData.getEnvSQL()
getNoSQl = EnvCollectData.getEnvNoSQL()
print(envData)
print(getNoSQl)



# env_path= Path(__file__).resolve().parent.parent.parent.parent / "config" / "postGre.env"

# print(env_path)